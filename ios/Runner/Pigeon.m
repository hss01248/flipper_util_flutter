// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}



@interface FLTFlipperDioApiCodecReader : FlutterStandardReader
@end
@implementation FLTFlipperDioApiCodecReader
@end

@interface FLTFlipperDioApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTFlipperDioApiCodecWriter
@end

@interface FLTFlipperDioApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTFlipperDioApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTFlipperDioApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTFlipperDioApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTFlipperDioApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTFlipperDioApiCodecReaderWriter *readerWriter = [[FLTFlipperDioApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLTFlipperDioApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTFlipperDioApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FlipperDioApi.reportRequest"
        binaryMessenger:binaryMessenger
        codec:FLTFlipperDioApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportRequestRequestId:timeStamp:uri:method:headers:body:completion:)], @"FLTFlipperDioApi api (%@) doesn't respond to @selector(reportRequestRequestId:timeStamp:uri:method:headers:body:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_requestId = args[0];
        NSNumber *arg_timeStamp = args[1];
        NSString *arg_uri = args[2];
        NSString *arg_method = args[3];
        NSDictionary<NSString *, NSString *> *arg_headers = args[4];
        NSString *arg_body = args[5];
        [api reportRequestRequestId:arg_requestId timeStamp:arg_timeStamp uri:arg_uri method:arg_method headers:arg_headers body:arg_body completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FlipperDioApi.reportResponse"
        binaryMessenger:binaryMessenger
        codec:FLTFlipperDioApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportResponseRequestId:timeStamp:statusCode:statusReason:headers:body:completion:)], @"FLTFlipperDioApi api (%@) doesn't respond to @selector(reportResponseRequestId:timeStamp:statusCode:statusReason:headers:body:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_requestId = args[0];
        NSNumber *arg_timeStamp = args[1];
        NSNumber *arg_statusCode = args[2];
        NSString *arg_statusReason = args[3];
        NSDictionary<NSString *, NSString *> *arg_headers = args[4];
        NSString *arg_body = args[5];
        [api reportResponseRequestId:arg_requestId timeStamp:arg_timeStamp statusCode:arg_statusCode statusReason:arg_statusReason headers:arg_headers body:arg_body completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
